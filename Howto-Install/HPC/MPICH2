1. Download mpich2-1.0.6.tar.gz
2. Compile the MPICH2
   $ cd /tmp
   $ tar zxvf /home/tcyen/Desktop/mpich2-1.0.6.tar.gz
   $ cd mpich2-1.0.6
   $ ./configure -prefix=/home/tcyen/mpich2
   $ make 2>&1 | tee /tmp/make.log
   $ make install 2>&1 | tee /tmp/make.log
   $ export PATH=/home/tcyen/mpich2/bin:$PATH
3. Check
   $ which mpd
   $ which mpicc
   $ which mpiexec
   $ which mpirun
4. MPICH2 uses an external process manager for scalable 
   startup of large MPI jobs.
   MPD: the default process manager
   $ mpd
   configuration file /home/tcyen/.mpd.conf not found
   A file named .mpd.conf file must be present in the user's home
   directory (/etc/mpd.conf if root) with read and write access
   only for the user, and must contain at least a line with:
   MPD_SECRETWORD=<secretword>
   One way to safely create this file is to do the following:
     cd $HOME
     touch .mpd.conf
     chmod 600 .mpd.conf
   and then use an editor to insert a line like
     MPD_SECRETWORD=mr45-j9z
   into the file.  (Of course use some other secret word than mr45-j9z.)
5. Test
   $ mpd&
   $ mpdtrace
   $ mpdallexit
6. ssh without password
   $ ssh-keygen -t rsa
   $ scp id_rsa.pub yen1:/tmp
   $ ssh yen1
   $ cd .ssh
   $ cat /tmp/id_rsa.pub >> authorized_keys
7. Create mpd.hosts in $HOME directory
   $ cat ~/hosts
     yen1
     yen2
8. Start the daemons on (some of) the hosts in the file mpd.hosts.
   $ mpdboot -n 2 -f mpd.hosts 
   $ mpdtrace 
   yen-amd2
   yen-amd1
9. Test the ring you have just created:
   $ mpdringtest # how long it takes a message to circle this ring
   $ mpdringtest 100
10.Test that the ring can run a multiprocess job:
   $ mpiexec -l -n 2 /bin/hostname
   0: yen-amd2
   1: yen-amd1
11.Now we will run an MPI job:


********************************

$ cat my.c

#include "mpi.h"
#include <stdio.h>

int main(int argc, char *argv[])
{
  int processID;
  int noProcesses;  
  int nameSize;
  char computerName[MPI_MAX_PROCESSOR_NAME];

  MPI_Init(&argc, &argv);
  MPI_Comm_size(MPI_COMM_WORLD, &noProcesses);
  MPI_Comm_rank(MPI_COMM_WORLD, &processID);

  MPI_Get_processor_name(computerName, &nameSize);
  fprintf(stderr, "Hello from process %d on %s\n", processID, computerName);

  MPI_Finalize();

  return 0;
}

$ mpicc my.c
$ mpd&
$ mpiexec -l -n 8 ./a.out








