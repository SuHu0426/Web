#! /bin/bash

if [ $# != 4 ]
  then echo "$0 OS.img hostname VM-IP Ether-card"
  exit 1
elif [ ! -f $1 ]
  then echo "OS image: $1 does not exist."
  exit 2
elif [ ! -d /mnt/tmp ] 
 then echo "Mount point /mnt/tmp does not exist, create it first."
 exit 3
fi

# We also need to test hostname, VM-IP, Ether-card are legal ones.

KvmScript="start-${2}"
StopAndRestoreLan="stop-${2}-restore-lan"
DeclAutoGen="# Don't Edit, File automatically generated by Config-KVM script" 

# We need to get the Ip of the assigned ether card and its MAC address and get a 
# fake MAC address for our VM.
HostIP=`ifconfig $4 | grep "Bcast" | sed 's/^[ \t]*inet addr://' | sed 's/[ \t]*Bcast:.*$//'`
PREFIX=`ifconfig $4 | grep "HWaddr" | sed 's/^eth[0-9]*.*Link.*HWaddr //' | cut -d':' -f 1-3`
F4=`od -An -N1 -x /dev/random | sed 's/^\ 00//'`
F5=`od -An -N1 -x /dev/random | sed 's/^\ 00//'`
F6=`od -An -N1 -x /dev/random | sed 's/^\ 00//'`
FakeMac=$PREFIX:${F4}:${F5}:${F6}

echo " I got current IP: ${HostIP}, FakeMac: ${FakeMac}"

echo "$2" >hostname
echo "127.0.0.1       localhost.localdomain localhost" >hosts
# Without the next line, "$ hostname --fqdn" can't produce the correct hostname.
echo "127.0.1.1       $2" >>hosts
echo "" >>hosts
echo "# The following lines are desirable for IPv6 capable hosts" >>hosts
echo "# \(added automatically by netbase upgrade\)" >>hosts
echo "" >>hosts

echo "::1 ip6-localhost ip6-loopback" >>hosts
echo "fe00::0 ip6-localnet" >>hosts
echo "ff00::0 ip6-mcastprefix" >>hosts
echo "ff02::1 ip6-allnodes" >>hosts
echo "ff02::2 ip6-allrouters" >>hosts
echo "ff02::3 ip6-allhosts" >>hosts


string=`basename $0`

echo "We need your root passwd for mounting $1:"

# Apparently, Debian adopts the lousy Ubuntu ether device rename policy.  We are forced 
# to empty the /etc/udev/rules.d/70*net* file!!  Otherwise, next time we boot our VM, 
# its ether device name will be wrong!

WHOAMI=`whoami`
sudo cp hostname /mnt/tmp/etc/hostname
sudo cp /etc/resolv.conf /mnt/tmp/etc
sudo cp hosts /mnt/tmp/etc/hosts
sudo cp recover70rules /mnt/tmp/home/${WHOAMI}
sudo cp ../DebianNetFiles/Empty70NetFile /mnt/tmp/home/${WHOAMI}

# Bring up ether interface and route packets to host in /etc/rc.local
cp ../DebianNetFiles/rc.local.kvm rc.local
cat <<EOF >interfaces
auto lo eth0
iface lo inet loopback
iface eth0 inet static
      address $3
      netmask 255.255.255.0
      dns-nameservers 140.120.13.1 140.120.1.2
EOF
cat <<EOF >modules
virtio
virtio_pci
virtio_ring
virtio_net
virtio_blk
EOF
echo "# route add default gw ${HostIP}" >>rc.local
echo "" >>rc.local
 
echo "exit 0" >>rc.local
sudo cp rc.local /mnt/tmp/etc/rc.local
sudo chmod 755 /mnt/tmp/etc/rc.local
sudo mv /mnt/tmp/etc/network/interfaces /mnt/tmp/etc/network/interfaces.orig
sudo cp interfaces /mnt/tmp/etc/network/interfaces
sudo mv /etc/initramfs-tools/modules /etc/initramfs-tools/modules.orig
sudo cp modules /etc/initramfs-tools/modules
sudo mv /mnt/tmp/etc/ssh/ssh_config /mnt/tmp/etc/ssh/ssh_config.orig 
sudo mv /mnt/tmp/etc/ssh/sshd_config /mnt/tmp/etc/ssh/sshd_config.orig 
sudo cp ../DebianNetFiles/ssh_config /mnt/tmp/etc/ssh
sudo cp ../DebianNetFiles/sshd_config /mnt/tmp/etc/ssh
sudo mv /mnt/tmp/etc/apt/sources.list /mnt/tmp/etc/apt/sources.list.orig
sudo cp ../DebianNetFiles/sources.list /mnt/tmp/etc/apt  
sudo umount /mnt/tmp


# Next three files are no longer needed and rc.local does not exist for Minix
rm -f rc.local hostname hosts interfaces modules

# Preparing Host Network Configuration Script
cat <<EOF >${KvmScript}
#! /bin/bash

${DeclAutoGen}
if [ \$EUID -ne 0 ]
   then sudo echo \"Super User passwd, please:\"
        if [ \$? -ne 0 ]
          then  echo \"Sorry, need su privilege!\"
                exit 1
        fi
fi

echo \"Starting VM: \${2}..., mem=1024M\"
EOF

SrcDir=`dirname $(pwd)`
SockDir=${SrcDir}/network-$$
echo SockDir=${SockDir}

cp ${KvmScript} ${KvmScript}-AsDaemon
cat <<EOF >>${KvmScript}
sudo kvm -name $2 -m 1024M -localtime \\
  -net nic,macaddr=${FakeMac},model=virtio \\
  -net tap,script=/src3/KBM/bin/start-TAP,downscript=/src3/KBM/bin/stop-TAP \\
  -monitor unix:${SockDir}/MonSock,server,nowait \\
  -usb -usbdevice tablet -k en-us \\
  -drive index=0,media=disk,if=virtio,file=$1 \\
  -daemonize
EOF

cat <<EOF >>${KvmScript}-AsDaemon
sudo screen -S $2 -d -m kvm -name $2 -m 1024M -localtime \\
  -net nic,macaddr=${FakeMac},model=virtio \\
  -net tap,script=/src3/KBM/bin/start-TAP,downscript=/src3/KBM/bin/stop-TAP \\
  -monitor unix:${SockDir}/MonSock,server,nowait \\
  -usb -usbdevice tablet -k en-us \\
  -drive index=0,media=disk,if=virtio,file=$1 \\
  -curses -daemonize
EOF

# Preparing Restore Lan Script
cat <<EOF >${StopAndRestoreLan}
#! /bin/bash

${DeclAutoGen}

if [ \$EUID -ne 0 ]
   then sudo echo \"Super User passwd, please:\"
        if [ \$? -ne 0 ]
          then  echo \"Sorry, need su privilege!\"
                exit 1
       fi
fi

echo \"system_powerdown\" | socat - unix-connect:${SockDir}/MonSock
echo \"Please wait 5 seconds.\"
sleep 5

sudo rm -f ${SockDir}/MonSock

EOF

chmod 755 ${KvmScript} ${KvmScript}-AsDaemon ${StopAndRestoreLan} 
